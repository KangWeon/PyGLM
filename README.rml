[title]PyGLM[/title]
[subtitle]OpenGL Mathematics (GLM) library for Python[/subtitle]
[b]GLSL + Optional features + Python = PyGLM[/b]
[b]A mathematics library for graphics programming.[/]

[i]Work in progress.[/]

[b]PyGLM[/] is using [url="https://glm.g-truc.net"]GLM by G-Truc[/] to offer a lot of the original features.  
PyGLM is missing some features, either because they couldn't be implemented properly 
or were found to be unnecessary effort (like glm::[b]vec1[/]).
If you encounter any issues or want to request a feature, please create an issue on the [url="https://github.com/Zuzu-Typ/PyGLM/issues"]issue tracker[/].

[s1]Tiny Documentation[/]
[s2]Why PyGLM?[/]
Besides the obvious - being mostly compatible with [b]GLM[/] - PyGLM offers a variety of features for [b]vector[/] and [b]matrix manipulation[/].
It has a lot of possible use cases, including [b]3D-Graphics[/] (OpenGL, DirectX, ...), [b]Physics[/] and more.

At the same time, it has [b]great performance[/], being between [b]2x and 10x as fast as numpy![/]
([i]depending on the individual function[/])
[s2]Installation[/]
[b]PyGLM[/] supports [b]Windows[/], [b]Linux[/], [b]MacOS[/] and other operating systems with either x86 ([b]32-bit[/]) or x64 ([b]64-bit[/]) architecture, 
running [b]Python 3[/].5 or higher. (Prior versions of Python - such as Python 2 - were supported up to PyGLM version 0.4.8b1)

It can be installed from the [url=https://pypi.python.org/pypi/PyGLM]PyPI[/] using [url=https://pip.pypa.io/en/stable/]pip[/]:
[code]pip install pyglm[/code]
And finally imported and used:
[code]import glm[/code]
[s2]Using PyGLM[/]
PyGLM's syntax is very similar to the original GLM's syntax.
There is no need to import anything but [b]glm[/], as it already contains the entire package.
Instead of using double colons ([b]::[/]) for namespaces, periods ([b].[/]) are used, so
[code]glm::detail::vec2[/code]
becomes
[code]glm.detail.vec2[/]
You can also use the base namespace [i]glm[/].
[code]glm.vec2[/]

There is no way to set preprocessor definitions (macros).
If - for example - you need to use the left handed coordinate system, you have to use [b]*LH[/], so
[code]glm.perspective[/]
becomes
[code]glm.perspectiveLH[/]

In case you need the size of a PyGLM data type, you can use 
[code]glm.sizeof(<type>)[/code]

There is currently no documentation for PyGLM.
Please refer to the source (in Python: [b]*.__doc__[/]) and GLM manuals, references and tutorials.

[s2]Example[/]
[code]
>>> import glm
>>> v = glm.vec3()
>>> v.x = 7
>>> print(v.xxy)
vec3(            7,            7,            0 )

>>> m = glm.mat4()
>>> print(m)
\[            0 |            0 |            0 |            0 \]
\[            0 |            0 |            0 |            0 \]
\[            0 |            0 |            0 |            0 \]
\[            0 |            0 |            0 |            0 \]

>>> v = glm.vec4(1, 2, 3, 4)
>>> print(v + (8, 7, 6, 5))
vec4(            9,            9,            9,            9 )[/code]